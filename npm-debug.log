0 info it worked if it ends with ok
1 verbose cli [ 'node', '/Users/blue-mtk/.nvm/v0.10.32/bin/npm', 'publish' ]
2 info using npm@2.9.0
3 info using node@v0.10.28
4 verbose publish [ '.' ]
5 silly cache add args [ '.', null ]
6 verbose cache add spec .
7 silly cache add parsed spec { raw: '.',
7 silly cache add   scope: null,
7 silly cache add   name: null,
7 silly cache add   rawSpec: '.',
7 silly cache add   spec: '/Users/blue-mtk/mtk/Oauth2-server-mtk',
7 silly cache add   type: 'directory' }
8 verbose addLocalDirectory /Users/blue-mtk/.npm/oauth2-server-QCMM/2.4.0/package.tgz not in flight; packing
9 verbose tar pack [ '/Users/blue-mtk/.npm/oauth2-server-QCMM/2.4.0/package.tgz',
9 verbose tar pack   '/Users/blue-mtk/mtk/Oauth2-server-mtk' ]
10 verbose tarball /Users/blue-mtk/.npm/oauth2-server-QCMM/2.4.0/package.tgz
11 verbose folder /Users/blue-mtk/mtk/Oauth2-server-mtk
12 info prepublish oauth2-server-QCMM@2.4.0
13 verbose addLocalTarball adding from inside cache /Users/blue-mtk/.npm/oauth2-server-QCMM/2.4.0/package.tgz
14 silly cache afterAdd oauth2-server-QCMM@2.4.0
15 verbose afterAdd /Users/blue-mtk/.npm/oauth2-server-QCMM/2.4.0/package/package.json not in flight; writing
16 verbose afterAdd /Users/blue-mtk/.npm/oauth2-server-QCMM/2.4.0/package/package.json written
17 silly publish { name: 'oauth2-server-QCMM',
17 silly publish   version: '2.4.0',
17 silly publish   description: 'Complete, compliant and well tested module for implementing an OAuth2 Server/Provider with [express](http://expressjs.com/) in [node.js](http://nodejs.org/)',
17 silly publish   main: 'lib/oauth2server.js',
17 silly publish   directories: { example: 'examples', test: 'test' },
17 silly publish   dependencies: { 'basic-auth': '~0.0.1' },
17 silly publish   devDependencies:
17 silly publish    { 'body-parser': '~1.3.1',
17 silly publish      express: '~4.4.3',
17 silly publish      mocha: '~1.20.1',
17 silly publish      should: '~4.0.4',
17 silly publish      supertest: '~0.13.0' },
17 silly publish   scripts: { test: 'echo "Error: no test specified" && exit 1' },
17 silly publish   repository:
17 silly publish    { type: 'git',
17 silly publish      url: 'git+https://github.com/iamblue/Oauth2-server-QCMM.git' },
17 silly publish   author: '',
17 silly publish   license: 'ISC',
17 silly publish   bugs: { url: 'https://github.com/iamblue/Oauth2-server-QCMM/issues' },
17 silly publish   homepage: 'https://github.com/iamblue/Oauth2-server-QCMM',
17 silly publish   readme: '# This project fork from oauth2-server prject\n# only use for demo test\n\n# Node OAuth2 Server [![Build Status](https://travis-ci.org/thomseddon/node-oauth2-server.png?branch=2.0)](https://travis-ci.org/thomseddon/node-oauth2-server)\n\nComplete, compliant and well tested module for implementing an OAuth2 Server/Provider with [express](http://expressjs.com/) in [node.js](http://nodejs.org/)\n\n## Installation\n\n```\nnpm install oauth2-server\n```\n\n## Quick Start\n\nThe module provides two middlewares, one for authorization and routing, another for error handling, use them as you would any other middleware:\n\n```js\nvar express = require(\'express\'),\n    bodyParser = require(\'body-parser\'),\n    oauthserver = require(\'oauth2-server\');\n\nvar app = express();\n\napp.use(bodyParser.urlencoded({ extended: true }));\n\napp.use(bodyParser.json());\n\napp.oauth = oauthserver({\n  model: {}, // See below for specification\n  grants: [\'password\'],\n  debug: true\n});\n\napp.all(\'/oauth/token\', app.oauth.grant());\n\napp.get(\'/\', app.oauth.authorise(), function (req, res) {\n  res.send(\'Secret area\');\n});\n\napp.use(app.oauth.errorHandler());\n\napp.listen(3000);\n```\n\nAfter running with node, visting http://127.0.0.1:3000 should present you with a json response saying your access token could not be found.\n\nNote: As no model was actually implemented here, delving any deeper, i.e. passing an access token, will just cause a server error. See below for the specification of what\'s required from the model.\n\n## Features\n\n- Supports authorization_code, password, refresh_token, client_credentials and extension (custom) grant types\n- Implicitly supports any form of storage e.g. PostgreSQL, MySQL, Mongo, Redis...\n- Full test suite\n\n## Options\n\n- *string* **model**\n - Model object (see below)\n- *array* **grants**\n - grant types you wish to support, currently the module supports `password` and `refresh_token`\n  - Default: `[]`\n- *function|boolean* **debug**\n - If `true` errors will be  logged to console. You may also pass a custom function, in which case that function will be called with the error as its first argument\n  - Default: `false`\n- *number* **accessTokenLifetime**\n - Life of access tokens in seconds\n - If `null`, tokens will considered to never expire\n  - Default: `3600`\n- *number* **refreshTokenLifetime**\n - Life of refresh tokens in seconds\n - If `null`, tokens will considered to never expire\n  - Default: `1209600`\n- *number* **authCodeLifetime**\n - Life of auth codes in seconds\n  - Default: `30`\n- *regexp* **clientIdRegex**\n - Regex to sanity check client id against before checking model. Note: the default just matches common `client_id` structures, change as needed \n  - Default: `/^[a-z0-9-_]{3,40}$/i`\n- *boolean* **passthroughErrors**\n - If true, **non grant** errors will not be handled internally (so you can ensure a consistent format with the rest of your api)\n- *boolean* **continueAfterResponse**\n - If true, `next` will be called even if a response has been sent (you probably don\'t want this)\n\n## Model Specification\n\nThe module requires a model object through which some aspects or storage, retrieval and custom validation are abstracted.\nThe last parameter of all methods is a callback of which the first parameter is always used to indicate an error.\n\nNote: see https://github.com/thomseddon/node-oauth2-server/tree/master/examples/postgresql for a full model example using postgres.\n\n### Always Required\n\n#### getAccessToken (bearerToken, callback)\n- *string* **bearerToken**\n - The bearer token (access token) that has been provided\n- *function* **callback (error, accessToken)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *object* **accessToken**\n     - The access token retrieved form storage or falsey to indicate invalid access token\n     - Must contain the following keys:\n         - *date* **expires**\n             - The date when it expires\n             - `null` to indicate the token **never expires**\n         - *mixed* **user** *or* *string|number* **userId**\n             - If a `user` key exists, this is saved as `req.user`\n             - Otherwise a `userId` key must exist, which is saved in `req.user.id`\n\n#### getClient (clientId, clientSecret, callback)\n- *string* **clientId**\n- *string|null* **clientSecret**\n - If null, omit from search query (only search by clientId)\n- *function* **callback (error, client)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *object* **client**\n     - The client retrieved from storage or falsey to indicate an invalid client\n     - Saved in `req.client`\n     - Must contain the following keys:\n         - *string* **clientId**\n         - *string* **redirectUri** (`authorization_code` grant type only)\n\n#### grantTypeAllowed (clientId, grantType, callback)\n- *string* **clientId**\n- *string* **grantType**\n- *function* **callback (error, allowed)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *boolean* **allowed**\n     - Indicates whether the grantType is allowed for this clientId\n\n#### saveAccessToken (accessToken, clientId, expires, user, callback)\n- *string* **accessToken**\n- *string* **clientId**\n- *date* **expires**\n- *object* **user**\n- *function* **callback (error)**\n - *mixed* **error**\n     - Truthy to indicate an error\n\n\n### Required for `authorization_code` grant type\n\n#### getAuthCode (authCode, callback)\n- *string* **authCode**\n- *function* **callback (error, authCode)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *object* **authCode**\n     - The authorization code retrieved form storage or falsey to indicate invalid code\n     - Must contain the following keys:\n         - *string|number* **clientId**\n             - client id associated with this auth code\n         - *date* **expires**\n             - The date when it expires\n         - *string|number* **userId**\n             - The userId\n\n#### saveAuthCode (authCode, clientId, expires, user, callback)\n- *string* **authCode**\n- *string* **clientId**\n- *date* **expires**\n- *mixed* **user**\n   - Whatever was passed as `user` to the codeGrant function (see example)\n- *function* **callback (error)**\n - *mixed* **error**\n     - Truthy to indicate an error\n\n\n### Required for `password` grant type\n\n#### getUser (username, password, callback)\n- *string* **username**\n- *string* **password**\n- *function* **callback (error, user)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *object* **user**\n     - The user retrieved from storage or falsey to indicate an invalid user\n     - Saved in `req.user`\n     - Must contain the following keys:\n         - *string|number* **id**\n\n### Required for `refresh_token` grant type\n\n#### saveRefreshToken (refreshToken, clientId, expires, user, callback)\n- *string* **refreshToken**\n- *string* **clientId**\n- *date* **expires**\n- *object* **user**\n- *function* **callback (error)**\n - *mixed* **error**\n     - Truthy to indicate an error\n\n#### getRefreshToken (refreshToken, callback)\n- *string* **refreshToken**\n - The bearer token (refresh token) that has been provided\n- *function* **callback (error, refreshToken)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *object* **refreshToken**\n     - The refresh token retrieved form storage or falsey to indicate invalid refresh token\n     - Must contain the following keys:\n         - *string|number* **clientId**\n             - client id associated with this token\n         - *date* **expires**\n             - The date when it expires\n             - `null` to indicate the token **never expires**\n         - *string|number* **userId**\n             - The userId\n\n\n### Optional for Refresh Token grant type\n\n#### revokeRefreshToken (refreshToken, callback)\nThe spec does not actually require that you revoke the old token - hence this is optional (Last paragraph: http://tools.ietf.org/html/rfc6749#section-6)\n- *string* **refreshToken**\n- *function* **callback (error)**\n - *mixed* **error**\n     - Truthy to indicate an error\n\n### Required for [extension grant](#extension-grants) grant type\n\n#### extendedGrant (grantType, req, callback)\n- *string* **grantType**\n - The (custom) grant type\n- *object* **req**\n - The raw request\n- *function* **callback (error, supported, user)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *boolean* **supported**\n     - Whether you support the grant type\n - *object* **user**\n     - The user retrieved from storage or falsey to indicate an invalid user\n     - Saved in `req.user`\n     - Must contain the following keys:\n         - *string|number* **id**\n\n### Required for `client_credentials` grant type\n\n#### getUserFromClient (clientId, clientSecret, callback)\n- *string* **clientId**\n- *string* **clientSecret**\n- *function* **callback (error, user)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *object* **user**\n     - The user retrieved from storage or falsey to indicate an invalid user\n     - Saved in `req.user`\n     - Must contain the following keys:\n         - *string|number* **id**\n\n\n### Optional\n\n#### generateToken (type, req, callback)\n- *string* **type**\n - `accessToken` or `refreshToken`\n- *object* **req**\n - The current express request\n- *function* **callback (error, token)**\n - *mixed* **error**\n     - Truthy to indicate an error\n - *string|object|null* **token**\n     - *string* indicates success\n     - *null* indicates to revert to the default token generator\n     - *object* indicates a reissue (i.e. will not be passed to saveAccessToken/saveRefreshToken)\n         - Must contain the following keys (if object):\n           - *string* **accessToken** OR **refreshToken** dependant on type\n\n## Extension Grants\nYou can support extension/custom grants by implementing the extendedGrant method as outlined above.\nAny grant type that is a valid URI will be passed to it for you to handle (as [defined in the spec](http://tools.ietf.org/html/rfc6749#section-4.5)).\nYou can access the grant type via the first argument and you should pass back supported as `false` if you do not support it to ensure a consistent (and compliant) response.\n\n## Example using the `password` grant type\n\nFirst you must insert client id/secret and user into storage. This is out of the scope of this example.\n\nTo obtain a token you should POST to `/oauth/token`. You should include your client credentials in\nthe Authorization header ("Basic " + client_id:client_secret base64\'d), and then grant_type ("password"),\nusername and password in the request body, for example:\n\n```\nPOST /oauth/token HTTP/1.1\nHost: server.example.com\nAuthorization: Basic czZCaGRSa3F0MzpnWDFmQmF0M2JW\nContent-Type: application/x-www-form-urlencoded\n\ngrant_type=password&username=johndoe&password=A3ddj3w\n```\nThis will then call the following on your model (in this order):\n - getClient (clientId, clientSecret, callback)\n - grantTypeAllowed (clientId, grantType, callback)\n - getUser (username, password, callback)\n - saveAccessToken (accessToken, clientId, expires, user, callback)\n - saveRefreshToken (refreshToken, clientId, expires, user, callback) **(if using)**\n\nProvided there weren\'t any errors, this will return the following (excluding the `refresh_token` if you\'ve not enabled the refresh_token grant type):\n\n```\nHTTP/1.1 200 OK\nContent-Type: application/json;charset=UTF-8\nCache-Control: no-store\nPragma: no-cache\n\n{\n  "access_token":"2YotnFZFEjr1zCsicMWpAA",\n  "token_type":"bearer",\n  "expires_in":3600,\n  "refresh_token":"tGzv3JOkF0XG5Qx2TlKWIA"\n}\n```\n\n## Changelog\n\nSee: https://github.com/thomseddon/node-oauth2-server/blob/master/Changelog.md\n\n## Credits\n\nCopyright (c) 2013 Thom Seddon\n\n## License\n\n[Apache, Version 2.0](https://github.com/thomseddon/node-oauth2-server/blob/master/LICENSE)\n',
17 silly publish   readmeFilename: 'Readme.md',
17 silly publish   gitHead: 'f64452b5785e6961d7865dfa1aaf475a7295f06f',
17 silly publish   _id: 'oauth2-server-QCMM@2.4.0',
17 silly publish   _shasum: '31f1ea30e42d1db7adeb39e10dd7f6d0e012250e',
17 silly publish   _from: '.' }
18 verbose getPublishConfig undefined
19 silly mapToRegistry name oauth2-server-QCMM
20 silly mapToRegistry using default registry
21 silly mapToRegistry registry https://registry.npmjs.org/
22 silly mapToRegistry uri https://registry.npmjs.org/oauth2-server-QCMM
23 verbose publish registryBase https://registry.npmjs.org/
24 silly publish uploading /Users/blue-mtk/.npm/oauth2-server-QCMM/2.4.0/package.tgz
25 verbose stack Error: Invalid name: "oauth2-server-QCMM"
25 verbose stack     at ensureValidName (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/node_modules/normalize-package-data/lib/fixer.js:310:15)
25 verbose stack     at Object.module.exports.fixNameField (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/node_modules/normalize-package-data/lib/fixer.js:205:5)
25 verbose stack     at CachingRegistryClient.publish (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/node_modules/npm-registry-client/lib/publish.js:41:11)
25 verbose stack     at /Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/lib/publish.js:134:14
25 verbose stack     at mapToRegistry (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/lib/utils/map-to-registry.js:55:3)
25 verbose stack     at publish_ (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/lib/publish.js:104:3)
25 verbose stack     at Array.1 (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/node_modules/slide/lib/bind-actor.js:15:8)
25 verbose stack     at LOOP (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/node_modules/slide/lib/chain.js:15:14)
25 verbose stack     at LOOP (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/node_modules/slide/lib/chain.js:14:28)
25 verbose stack     at chain (/Users/blue-mtk/.nvm/v0.10.32/lib/node_modules/npm/node_modules/slide/lib/chain.js:20:5)
26 verbose cwd /Users/blue-mtk/mtk/Oauth2-server-mtk
27 error Darwin 14.1.0
28 error argv "node" "/Users/blue-mtk/.nvm/v0.10.32/bin/npm" "publish"
29 error node v0.10.28
30 error npm  v2.9.0
31 error Invalid name: "oauth2-server-QCMM"
32 error If you need help, you may report this error at:
32 error     <https://github.com/npm/npm/issues>
33 verbose exit [ 1, true ]
